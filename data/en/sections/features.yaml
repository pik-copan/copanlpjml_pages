# section information
section:
  name: Features
  id: features
  enable: true
  weight: 2
  showOnNavbar: true
  # Can optionally hide the title in sections
  # hideTitle: true

# Your experiences
features:
  - positions:
      - name: Written in Python, for any language
        content_left: |
          Use the power and convenience of Python to wrap you models, write adapters, and set up model linkage.

          Benefit from Python as glue code to couple models from different programming languages.
          Exchange any data between models in any language!
        content_right: |
          <img src="/images/python-logo-generic.svg" />

          ```python
          (
              cpp_model.outputs["precip"]
              >> TimeIntegration()
              >> fortran_model.inputs["precip"]
          )
          ```
  - positions:
      - name: Flexible, component-based model coupling
        content_left: |
          A component-based coupling approach warrants high modularity and independence of linked components.

          Models are wrapped into a unified interface, and communicate through adapters.
        content_right: |
          <img src="/images/coupling.svg" />
  - positions:
      - name: Minimal, unified component interface
        content_left: |
          Wrapping existing models is easy!

          Write Python bindings for initialization and step functionality,
          and implement the straight-forward FINAM interface.

          A fully functional component can have less than 50 lines of code!
        content_right: |
          ```python
          class MyComponent(TimeComponent):
              def __init__(self, ...)
              def initialize(self)
              def connect(self)
              def validate(self)
              def update(self)
              def finalize(self)
          ```
  - positions:
      - name: Minimal-effort adapters
        content_left: |
          Adapters are used for data transformations between components.
          Examples are regridding, CRS transformations or temporal interpolation.

          FINAM's adapter interface is simple and easy to implement.
        content_right: |
          ```python
          class ScaleAdapter(Adapter):
              def __init__(self, scale):
                  super().__init__()
                  self.scale = scale
              def _get_data(self, time):
                  d = self.pull_data(time)
                  return d * self.scale
          ```
  - positions:
      - name: Bi-directional and circular coupling
        content_left: |
          FINAM's scheduling algorithm allows for bi-directional and circular coupling setups,
          as well as fully flexible and even varying model time steps.
        content_right: |
          <img src="/images/scheduling.svg" />
  - positions:
      - name: Spatio-temporal data types
        content_left: |
          For structured and unstructured spatio-temporal data, FINAM uses [`xarray`](https://xarray.dev/).
          All data has physical units, using [`pint`](https://pint.readthedocs.io/en/stable/).

          Metadata is used for automatic consistency checks, and follows the CF Conventions.
        content_right: |
          <img src="/images/dataset-diagram-logo.png" />

