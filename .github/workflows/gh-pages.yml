name: Hugo CI with Documentation

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  # Trigger when docs are updated
  repository_dispatch:
    types: [docs-updated]

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main' && github.event_name != 'repository_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test Hugo build (without docs)
        run: |
          echo "Testing Hugo build without external docs..."
          hugo --logLevel info
          
      - name: Verify output
        run: |
          ls -la public/
          echo "âœ… Hugo build successful"

  pages:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'repository_dispatch'
    permissions:
      contents: read
      pages: write
      id-token: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd themes/toha && npm ci && cd ../..

      - name: Download latest documentation
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: build-docs-artifact.yml
          repo: pik-copan/pycopanlpjml
          name: sphinx-docs
          path: ./static/docs
          branch: main
          workflow_conclusion: success
          search_artifacts: true
          check_artifacts: true
          if_no_artifact_found: warn
        continue-on-error: true

      - name: Ensure docs directory exists
        run: |
          mkdir -p static/docs
          if [ ! -f static/docs/index.html ]; then
            echo "Creating placeholder docs page..."
            cat > static/docs/index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Documentation - copan:LPJmL</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 2rem;
            background-color: #f2f3e3;
            color: #344643;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            text-align: center;
        }
        h1 {
            color: #e37222;
            margin-bottom: 1rem;
        }
        .message {
            background: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin: 2rem 0;
        }
        .link {
            color: #e37222;
            text-decoration: none;
            font-weight: 500;
        }
        .link:hover {
            color: #91cdcd;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Documentation</h1>
        <div class="message">
            <p>The documentation is currently being built and will be available soon.</p>
            <p>In the meantime, you can access the latest documentation at:</p>
            <p><a href="https://copanlpjml.readthedocs.io/" class="link" target="_blank">https://copanlpjml.readthedocs.io/</a></p>
        </div>
    </div>
</body>
</html>
EOF
          fi
          echo "Docs directory contents:"
          ls -la static/docs/

      - name: Build Hugo site
        env:
          HUGO_ENV: production
        run: |
          echo "Building Hugo site with documentation..."
          hugo --logLevel info

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
