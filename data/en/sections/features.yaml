# section information
section:
  name: How it works ...
  id: features
  enable: true
  weight: 2
  showOnNavbar: true
  # Can optionally hide the title in sections
  # hideTitle: true

# Your experiences
features:
  - positions:
      - name: A detailed biosphere representation
        content_left: |
          copan:LPJmL uses LPJmL for a detailed representation of the
          terrestrial biosphere.  

          LPJmL is a dynamic global vegetation model that simulates the carbon,
          nitrogen, water and energy cycles in conjunction with the growth and
          productivity of natural and agricultural ecosystems.  
          These are driven by climate, land use, or other globally gridded
          input data.

          It can represent a wide range of agricultural management systems, and
          its impacts simulated by the process-based richness of LPJmL.

          <img src="/images/lpjml_logo.svg" width="230" />

        content_right: |
          <img src="/images/lpjml_scheme.png" />

  - positions:
      - name: The CORE World-Earth modeling framework 
        content_left: |
          <img src="/images/copan_core.png" />
        content_right: |
          copan:CORE sets the hierarchy, design principles and interfaces
          applied in copan:LPJmL.
          
          It provides entities for the construction of World-Earth Models to
          represent human societies, economies, and their interactions with the
          Earth system.
          
          copan:CORE enables the modular composition of
          biophysical, socio-metabolic, and sociocultural processes involving
          each entity.

  - positions:
      - name: Bidirectional and circular model integration
        content_left: |
          With pycoupler we enabled annual data coupling with LPJmL for any
          Python-based software.

          LPJmL can send all available output and receive all available inputs
          via the interface.

          copan:LPJmL integrates pycoupler into the CORE hierarchy featuring
          World as the entire simulation space and Cell as the smallest
          simulation unit.

        content_right: |
          <img src="/images/coupling.svg" />
  - positions:
      - name: Simple model setups and simulations
        content_left: |
          Wrapping existing models is easy!

          Write Python bindings for initialization and step functionality,
          and implement the straight-forward copan:LPJML interface.

          A fully functional component can have less than 50 lines of code!
        content_right: |
          ```python
          class MyComponent(TimeComponent):
              def __init__(self, ...)
              def initialize(self)
              def connect(self)
              def validate(self)
              def update(self)
              def finalize(self)
          ```
  - positions:
      - name: Minimal-effort adapters
        content_left: |
          Adapters are used for data transformations between components.
          Examples are regridding, CRS transformations or temporal interpolation.

          copan:LPJmL's adapter interface is simple and easy to implement.
        content_right: |
          ```python
          class ScaleAdapter(Adapter):
              def __init__(self, scale):
                  super().__init__()
                  self.scale = scale
              def _get_data(self, time):
                  d = self.pull_data(time)
                  return d * self.scale
          ```
  - positions:
      - name: Bi-directional and circular coupling
        content_left: |
          copan:LPJmL's scheduling algorithm allows for bi-directional and circular coupling setups,
          as well as fully flexible and even varying model time steps.
        content_right: |
          <img src="/images/scheduling.svg" />
  - positions:
      - name: Spatio-temporal data types
        content_left: |
          For structured and unstructured spatio-temporal data, copan:LPJmL uses [`numpy`](https://numpy.org) arrays.
          All data has physical units, using [`pint`](https://pint.readthedocs.io/en/stable/).

          Metadata is used for automatic consistency checks, and follows the CF Conventions.
        content_right: |
          <a href="https://numpy.org" title="NumPy">
            <img src="/images/NumPy_logo.svg" />
          </a>

