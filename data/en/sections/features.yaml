# section information
section:
  name: Features
  id: features
  enable: true
  weight: 2
  showOnNavbar: true
  # Can optionally hide the title in sections
  # hideTitle: true

# Your experiences
features:
  - positions:
      - name: Written in Python, for any language
        content_left: |
          Use the power and convenience of Python to wrap you models, write adapters, and set up model linkage.

          Benefit from Python as glue code to couple models from different programming languages.
          Exchange any data between models in any language!
        content_right: |
          <img src="/images/python-logo-generic.svg" />

          ```python
          (
              cpp_model
              >> TimeInterpolation()
              >> fortran_model
          )
          ```
  - positions:
      - name: Flexible, component-based model coupling
        content_left: |
          Component-based coupling warrants high modularity and easy code-driven introspection of coupling setups.
        content_right: |
          [IMAGE COUPLING]
  - positions:
      - name: Minimal, unified component interface
        content_left: |
          Wrapping existing models is easy! Write python bindings for initialization and step functionality,
          and implement the straight-forward FINAM interface.
        content_right: |
          ```python
          class MyComponent(ATimeComponent):
              def __init__(self, ...)
              def initialize(self)
              def connect(self)
              def validate(self)
              def update(self)
              def finalize(self):
          ```
  - positions:
      - name: Minimal-effort adapters
        content_left: |
          Adapters are used for data transformations between components.
          Examples are regridding, unit conversions or temporal interpolation.
          FINAM's adapter interface is simple and easy to implement.
        content_right: |
          ```python
          class ScaleAdapter(AAdapter):
              def __init__(self, scale):
                  super().__init__()
                  self.scale = scale
              def get_data(self):
                  d = self.pull_data(time)
                  return d * self.scale
          ```
  - positions:
      - name: Bi-directional and circular coupling
        content_left: |
          FINAM's scheduling algorithm allows for bi-directional and circular coupling setups.
        content_right: |
          ```python
          model_a >> model_b
          model_b >> model_a
          ```
  - positions:
      - name: Model coupling at initialization
        content_left: |
          Due to FINAM's unique iterative initialization approach,
          models can depend on inputs from other models already during initialization.
        content_right: |
          [IMAGE???]
