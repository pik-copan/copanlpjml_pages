# section information
section:
  name: Features
  id: features
  enable: true
  weight: 2
  showOnNavbar: true
  # Can optionally hide the title in sections
  # hideTitle: true

# Your experiences
features:
  - positions:
      - name: A detailed biosphere representation
        content_left: |
          copan:LPJmL uses LPJmL for a detailed representation of the
          terrestrial biosphere.  

          **LPJmL is a dynamic global vegetation model** that simulates the
          carbon, nitrogen, water and energy cycles in conjunction with the
          growth and productivity of **natural and agricultural ecosystems**.  
          These are driven by climate, land use, or other globally gridded
          input data.

          It can represent a wide range of agricultural management systems,
          its impacts simulated by the process-based richness of LPJmL.

          <img src="/images/lpjml_logo.svg" width="230" />

        content_right: |
          <img src="/images/lpjml_scheme.png" />

  - positions:
      - name: The CORE World-Earth modeling framework 
        content_left: |
          <img src="/images/copan_core_short.png" />
        content_right: |
          copan:CORE defines the hierarchy, design principles and interfaces
          applied in copan:LPJmL.
          
          It provides entities to **represent human societies, economies, and
          their interactions with the Earth system**.
          
          Flexibly compose biophysical, socio-metabolic, and sociocultural
          processes involving different entities.


          <img src="/images/copan_core.svg" width="160" style="float: right;" />

  - positions:
      - name: Dynamic model integration
        content_left: |
          pycoupler enables a **bidirectional annual data coupling**
          with LPJmL for Python environments.

          copan:LPJmL integrates pycoupler into the CORE hierarchy featuring
          World as the entire simulation space and Cell as the smallest
          simulation unit.

        content_right: |
          <img src="/images/coupling.svg" />
  - positions:
      - name: Simple model setups and simulations
        content_left: |
          ```python
          from pycoupler import read_config
          from pycoupler import submit_lpjml
        
          config_coupled = read_config(
              model_path="./LPJmL",
              file_name="lpjml_config.cjson"
          )
          
          config_coupled.set_coupled(
              sim_name="coupled_run",
              start_year=2001, end_year=2100,
              coupled_year=2023,
              coupled_input=["with_tillage"],
              coupled_output=["soilc", "harvestc"]
          )

          config_coupled_fn = config_coupled.to_json()
          submit_lpjml(config_file=config_coupled_fn)
          ```

        content_right: |
          Model simulations can be **configured and run with a few lines of code ...**

          It needs a compiled LPJmL version > 5.9 and a Python environment with
          an installed `pycopanlpjml` library.

          LPJmL can send **all available outputs** such as soil carbon (soilc) or
          crop yield (harvestc) and receive **all available inputs** such as
          tillage application (with_tillage) via the interface.
          
          The example on the right is from the model setup of the *InSEEDS
          model*, where farming agents can decide on whether to apply tillage
          or not based on the status of soilc and harvestc.

          This way achieving **closed feedback loops** of social-ecological
          systems.

  - positions:
      - name: Build with your entities and processes
        content_left: |
          Use the base entities copan:CORE provides and **set up new entities**
          that are needed for your projects, for example farmers.

          These can then be filled with processes like management changes based
          on attitude formation towards own land.

          **Farmers can always access the LPJmL outputs & inputs of their cell**
          to base their attitude on the soil carbon content and the crop yield.

          In a later process, the farmers can decide on whether to apply tillage
          or not and change the corresponding input (with_tillage) to LPJmL.
        content_right: |
          ```python
          class Farmer(Individual):

          def attitude_own_land(self):
              self.soilc = self.cell.output.soilc.values[0]
              self.cropyield = self.cell.output.harvestc.values.mean()

              attitude_soil = (self.soilc - self.soilc_past) / self.soilc_past
              attitude_yield = (self.cropyield - self.cropyield_past) / self.cropyield_past

              return sigmoid(
                  self.weight_yield * attitude_yield
                  + self.weight_soil * attitude_soil
              )
          ```
  - positions:
      - name: Up to global social-ecological systems
        content_left: |
          <img src="/images/examples.png" />
        content_right: |
          Several models have already been built with copan:LPJmL, for example:

          * **InSEEDS**, an agent-based socio-ecological model to simulate 
          spreading of regenrative agriculture practices such as conservation
          tillage.

          * **Crop Calendar**, after Minoli et al. (2022), a rule-based model
          to calculate shifts in the planting date of crops based on climate
          variations

          * **LLM-fertilization**, a model in which an LLM is coupled to LPJmL
          to simulate the fertilization decisions of farmers with an example
          use case of Togo.
